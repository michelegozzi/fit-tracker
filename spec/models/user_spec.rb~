# == Schema Information
#
# Table name: users
#
#  id              :integer          not null, primary key
#  name            :string(255)
#  email           :string(255)
#  created_at      :datetime         not null
#  updated_at      :datetime         not null
#  password_digest :string(255)
#  remember_token  :string(255)
#  admin           :boolean          default(FALSE)
#

require 'spec_helper'

describe User do
	before { @user = User.new(name: "Test User", email: "user@test.org", password: "p4ssw0rd", password_confirmation: "p4ssw0rd") }

	subject { @user }

	it { should respond_to(:name) }
	it { should respond_to(:email) }
	it { should respond_to(:password_digest) }
	it { should respond_to(:password) }
	it { should respond_to(:password_confirmation) }
	it { should respond_to(:remember_token) }
	it { should respond_to(:admin) }		#9.39
	it { should respond_to(:authenticate) }
	#it { should respond_to(:microposts) }	#10.9
	#it { should respond_to(:feed) }			#10.38
	#it { should respond_to(:relationships) }	#11.3
	#it { should respond_to(:followed_users) }	#11.9
	#it { should respond_to(:reverse_relationships) }	#11.15
	#it { should respond_to(:followers) }				#11.15
	#it { should respond_to(:following?) }	#11.11
	#it { should respond_to(:follow!) }		#11.11
	#it { should respond_to(:unfollow!) }	#11.13

	it { should be_valid }
	it { should_not be_admin }	#9.39

	#9.39
	describe "9.39 with admin attribute set to 'true'" do
		before do
			@user.save!
			@user.toggle!(:admin)
		end

		it { should be_admin }
	end

	describe "when name is not present" do
		before { @user.name = " " }
		it { should_not be_valid }
	end

	describe "when name is too long" do
		before { @user.name = "a" * 51 }
		it { should_not be_valid }
	end

	describe "when email is not present" do
		before { @user.email = " " }
		it { should_not be_valid }
	end

	describe "when email format is invalid" do
		it "should be invalid" do
			addresses = %w[user@foo,com user_at_foo.org example.user@foo. foo@bar_baz.com foo@bar+baz.com]
			addresses.each do |invalid_address|
				@user.email = invalid_address
				@user.should_not be_valid
			end
		end
	end

	describe "when email format is valid" do
		it "should be valid" do
			addresses = %w[user@foo.COM A_US-ER@f.b.org frst.lst@foo.jp a+b@baz.cn]
			addresses.each do |valid_address|
				@user.email = valid_address
				@user.should be_valid
			end
		end
	end

	describe "when email address is already taken" do
		before do
			user_with_same_email = @user.dup
			user_with_same_email.email = @user.email.upcase
			user_with_same_email.save
		end


		it { should_not be_valid }

		before do
			user_with_same_email = @user.dup
			user_with_same_email.email = @user.email.downcase
			user_with_same_email.save
		end


		it { should_not be_valid }
	end

	describe "email address with mixed case" do
		let(:mixed_case_email) { "Foo@ExAMPle.CoM" }

		it "should be saved as all lower-case" do
			@user.email = mixed_case_email
			@user.save
			@user.reload.email.should == mixed_case_email.downcase
		end
	end

	describe "when the password is not present" do
		before { @user.password = @user.password_confirmation = " " }
		it { should_not be_valid }
	end

	describe "when the desn't match confirmation" do
		before { @user.password_confirmation = "m1sm4tch" }
		it { should_not be_valid }
	end

	describe "when password confirmation is nil" do
		before { @user.password_confirmation = nil }
		it { should_not be_valid }
	end

	describe "with a password that's too shortnot present" do
		before { @user.password = @user.password_confirmation = "a" * 5 }
		it { should be_invalid }
	end

	describe "with a password that's too shortnot present" do
		before { @user.save }
		let (:found_user) { User.find_by_email(@user.email) }

		describe "with valid password" do
			it { should == found_user.authenticate(@user.password) }
		end

		describe "with invalid password" do
			let (:user_for_invalid_password) { found_user.authenticate("1nv4l1d") }
			it { should_not == user_for_invalid_password }
			specify { user_for_invalid_password.should be_false }
		end
	end

	describe "remember token" do
		before { @user.save }
		its(:remember_token) { should_not be_blank }
	end

	#9.6 Exercise 1
	describe "9.6 accessible attributes" do
		it "should not allow access to admin" do
			expect do
				User.new(admin: @user.admin)
			end.to raise_error(ActiveModel::MassAssignmentSecurity::Error)
		end    
	end

	#10.13
	describe "10.13 micropost associations" do

		before { @user.save }
		#let!(:older_micropost) do 
		#	FactoryGirl.create(:micropost, user: @user, created_at: 1.day.ago)
		#end
		#let!(:newer_micropost) do
		#	FactoryGirl.create(:micropost, user: @user, created_at: 1.hour.ago)
		#end

		#it ", 10.13 should have the right microposts in the right order" do
		#	@user.microposts.should == [newer_micropost, older_micropost]
		#end

		##10.15
		#it ", 10.15 should destroy associated microposts" do
		#	microposts = @user.microposts.dup
		#	@user.destroy
		#	microposts.should_not be_empty
		#	microposts.each do |micropost|
		#		Micropost.find_by_id(micropost.id).should be_nil
		###		lambda do 
		###			Micropost.find(micropost.id)
		###		end.should raise_error(ActiveRecord::RecordNotFound)
		#	end
    	#end

		##10.38
#    	describe ", 10.38 status" do
#			let(:unfollowed_post) do
#				FactoryGirl.create(:micropost, user: FactoryGirl.create(:user))
#			end
#
#			its(:feed) { should include(newer_micropost) }
#			its(:feed) { should include(older_micropost) }
#			its(:feed) { should_not include(unfollowed_post) }
#		end

#		#11.11
#		describe ", 11.11 following" do
#			let(:other_user) { FactoryGirl.create(:user) }    
#			before do
#				@user.save
#				@user.follow!(other_user)
#			end

#			it { should be_following(other_user) }
#			its(:followed_users) { should include(other_user) }

#			describe ", 11.15 followed user" do
#				subject { other_user }
#				its(:followers) { should include(@user) }
#			end

#			#11.13
#			describe ", 11.13 and unfollowing" do
#				before { @user.unfollow!(other_user) }
#
#				it { should_not be_following(other_user) }
#				its(:followed_users) { should_not include(other_user) }
#			end
#		end


#		#11.41
#		describe ", 11.41 status" do
#			let(:unfollowed_post) do
#				FactoryGirl.create(:micropost, user: FactoryGirl.create(:user))
#			end
#			let(:followed_user) { FactoryGirl.create(:user) }

#			before do
#				@user.follow!(followed_user)
#				3.times { followed_user.microposts.create!(content: "Lorem ipsum") }
#			end

#			its(:feed) { should include(newer_micropost) }
#			its(:feed) { should include(older_micropost) }
#			its(:feed) { should_not include(unfollowed_post) }
#			its(:feed) do
#				followed_user.microposts.each do |micropost|
#					should include(micropost)
#				end
#			end
#		end
#	end

	#EX11.5/1 
#	describe ", EX11.5/1 relationship associations" do
#		let(:other_user) { FactoryGirl.create(:user) }
#		before do
#			@user.save
#			@user.follow!(other_user)
#			other_user.follow!(@user)
#		end

#		it "should destroy associated relationships" do
#			relationships = @user.relationships
#			@user.destroy
#			relationships.should be_empty
#		end

#		it "should destroy associated reverse relationships" do
#			reverse_relationships = @user.reverse_relationships
#			@user.destroy
#			reverse_relationships.should be_empty
#		end
#	end


end
